Automatically generated by Mendeley 1.3
Any changes to this file will be lost if it is regenerated by Mendeley.

@article{Brebner2011,
author = {Brebner, Paul},
file = {::},
journal = {Service-Oriented Computing},
keywords = {amazon ec2,cloud performance,cost,google appengine,limits,oriented performance modeling,quotas,scalability,service-,sopm},
title = {{Performance and cost assessment of cloud services}},
url = {http://www.springerlink.com/index/444475421L1X1482.pdf},
year = {2011}
}
@inproceedings{Unpingco2008,
author = {Unpingco, Jos\'{e}},
booktitle = {2008 DoD HPCMP Users Group Conference},
doi = {10.1109/DoD.HPCMP.UGC.2008.48},
file = {:Users/rcloud/Documents/All.sente6lib/Contents/Attachments/Unpingco/2008/User Friendly High Productivity Computational Work.pdf:pdf},
isbn = {978-0-7695-3515-9},
pages = {387--390},
publisher = {Ieee},
title = {{User Friendly High Productivity Computational Workflows Using the VISION/HPC Prototype}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=4755897},
year = {2008}
}
@article{Dalcin2011,
author = {Dalcin, Lisandro D. and Paz, Rodrigo R. and Kler, Pablo a. and Cosimo, Alejandro},
doi = {10.1016/j.advwatres.2011.04.013},
file = {:Users/rcloud/Documents/All.sente6lib/Contents/Attachments/Dalcin/2011/Parallel distributed computing using Python.pdf:pdf},
issn = {03091708},
journal = {Advances in Water Resources},
month = apr,
number = {9},
pages = {1124--1139},
publisher = {Elsevier Ltd},
title = {{Parallel distributed computing using Python}},
url = {http://linkinghub.elsevier.com/retrieve/pii/S0309170811000777},
volume = {34},
year = {2011}
}
@inproceedings{Alghamdi2011a,
author = {Alghamdi, Amal and Ahmadia, Aron and Ketcheson, David I and Knepley, Matthew G and Mandli, Kyle T},
booktitle = {Proceedings of HPC},
file = {:Users/rcloud/Documents/All.sente6lib/Contents/Attachments/Alghamdi/2011/Pet-Claw A Scalable Parallel Nonlinear Wave Propa.pdf:pdf},
keywords = {clawpack,petsc,petsc4py,wave propagation},
number = {1},
title = {{PetClaw : A Scalable Parallel Nonlinear Wave Propagation Solver for Python}},
year = {2011}
}
@inproceedings{Rabenseifner2009,
author = {Rabenseifner, Rolf and Hager, Georg and Jost, Gabriele},
booktitle = {Parallel, Distributed and Network-based Processing, 2009 17th Euromicro International Conference on},
file = {::},
number = {c},
pages = {427--436},
publisher = {IEEE},
title = {{Hybrid MPI/OpenMP parallel programming on clusters of multi-core SMP nodes}},
url = {http://ieeexplore.ieee.org/xpls/abs\_all.jsp?arnumber=4912964},
year = {2009}
}
@article{Granger2010,
author = {Granger, B.},
file = {:Users/rcloud/Documents/All.sente6lib/Contents/Attachments/P\'{e}rez/2011/Python an ecosystem for scientific computing.pdf:pdf},
journal = {CiSE 2011 Special Python Issue},
pages = {5},
title = {{Python an ecosystem for scientific computing}},
url = {http://sage.math.washington.edu/tmp/stein-cise-comments-may22.pdf\#page=9},
year = {2010}
}
@article{Dalcin2005,
author = {Dalc\'{\i}n, Lisandro and Paz, Rodrigo and Storti, Mario},
doi = {10.1016/j.jpdc.2005.03.010},
file = {::},
issn = {07437315},
journal = {Journal of Parallel and Distributed Computing},
keywords = {high level languages,message passing,mpi,parallel python},
month = sep,
number = {9},
pages = {1108--1115},
title = {{MPI for Python}},
url = {http://linkinghub.elsevier.com/retrieve/pii/S0743731505000560},
volume = {65},
year = {2005}
}
@inproceedings{Kloeckner2010,
author = {Kloeckner, Andreas},
booktitle = {Scipy 2010},
file = {::},
title = {{Scripting GPUs with PyOpenCL}},
url = {http://conference.scipy.org/scipy2010/slides/tutorials/andreas\_kloeckner\_pyopencl.pdf},
year = {2010}
}
@article{Dalcin2008,
author = {Dalcin, L and Paz, R and Storti, M and Delia, J},
doi = {10.1016/j.jpdc.2007.09.005},
file = {::},
issn = {07437315},
journal = {Journal of Parallel and Distributed Computing},
keywords = {high-level languages,message passing,mpi,parallel python},
month = may,
number = {5},
pages = {655--662},
title = {{MPI for Python: Performance improvements and MPI-2 extensions}},
url = {http://linkinghub.elsevier.com/retrieve/pii/S0743731507001712},
volume = {68},
year = {2008}
}
@article{Finsterle1997,
author = {Finsterle, Stefan and Persoff, Peter},
doi = {10.1029/97WR01200},
file = {::},
issn = {0043-1397},
journal = {Water Resources Research},
number = {8},
pages = {1803},
title = {{Determining permeability of tight rock samples using inverse modeling}},
url = {http://www.agu.org/pubs/crossref/1997/97WR01200.shtml},
volume = {33},
year = {1997}
}
@inproceedings{Seljebotn2009,
annote = {        this discusses the optimal ways to use Cython in numerical calculation
                
provides benchmarks of cython
discusses MPI
        
the python interpreter is too slow to be usable for writing low level numerical loops
        
cython has additional syntax for optional static type declarations
        
cython compiler translates Cython code into C by making use of the CPython C API which can be compiled into a module loadable into any CPython session
        
can use python and C interchangeably in the same code.  
        
curently a few incompatabilities and unsupported constructs, e.g. inner functions and generators
        
wilbers compares cython with similar tools to speed up a particular numerical loop. 
        
Cython achieves a running time 1.6 times that of fortran implementation
        
Cython has a friendlier syntax for accessing numpy arrays directly
                  
This paper is mostly about Cython and Numpy arrays in computational computing
                
cython can treat most numpy array data types as corresponding native c types
        
to get any real speedup add types
        
can turn off if tests with compiler directives for even more speed up.  
        
leave bounds checking on until sure code is correct, then turn it off for high speed.  
        
compiler directives can be specified for functions, code blocks, or globally for the source file.  
        
memory layout is important
        
matricies can be laid out optimally
        
use "mode" argument to tell cython arrays are contiguous
        
raises Value Error if arrays do not satisfy requirements
        
use "order" argument to most NumPy array constructor functions
        
p. 18: use Cython to speed up custom numerical loops for which tehrea re no prior implementations available.  
        
for Cython very easy to call existing code.  
        
interesting idea would be to use SSE instructions from cython using their C api
        
parallel computation: 
important distinction b/w shared memory models and message passing models. 
        
openMP not available in Cython. use Python threads instead.  
        
every operation involving a python object must be done while holding the global interpreter lock (GIL). Thus pure python scripts are typically unable to utilize more than one CPU core, even if many threads are used.
        
GIL is by default held until one returns to the Python caller.  
                  
Use Cython language constructs to manually release the GIL then one can achieve proper multi-threading on many cores.          
                  
however, no python operations are allowed when the GIL is released.
                
use nogil
        
mpi4py is written with Cython and ships with the Cython compile time definitions necessary to communicate with the underlying MPI C API
      },
author = {Seljebotn, Dag Sverre},
booktitle = {Proceedings of the 8th Python in Science Conference (SciPy 2009)},
file = {::},
keywords = {HLHPC,python},
mendeley-tags = {HLHPC,python},
number = {SciPy},
pages = {15--22},
title = {{Fast numerical computations with Cython}},
year = {2009}
}
@inproceedings{wilbers,
annote = {how to speed up python programs:
        
uses finite difference solution of wave equation as test case. 
        
find optimal mix of python and low level programming
        
compared to tools such as weave, F2PY and instant
        
this paper will help us determine the most optimal lower level programming language to use
        
administrative non numerical tasks often fill up most of large scientific software packages <- thus write them in python
        
cython aims to make integration of C and python easier
        
declare types with cdef
        
functions defined with cdef cannot be called directly from python. },
author = {Wilbers, I.M. and Langtangen, H.P. and \O deg\aa rd, \AA smund},
booktitle = {Proceedings of MekIT},
editor = {{H. I. Andersson}},
file = {::},
keywords = {compiled languages,numerical algorithms,python},
pages = {495--512},
title = {{Using Cython to Speed up Numerical Python Programs}},
url = {http://scholar.google.com/scholar?hl=en\&btnG=Search\&q=intitle:Using+Cython+to+Speed+up+Numerical+Python+Programs\#0},
volume = {9},
year = {2009}
}
@article{behnel,
annote = {Cython compiles directly to C then linked against python. 
        
Cython makes embedded numerical loops run at C speed. 
        
Sometimes numpy is the better choice in its own right. this paper explains when to use numpy, and when to use Cython. p. 31
        
Fwrap is a close relative to cython that automatically creates fast wrappers around fortran code
        
Cython forked from Pyrex.
 cython aims at maintaining python syntax
        
cython offers fast numpy array access
        
cython is a "swiss army knife" and has generality and versatility
        
80/20 rule: 80 percent of the runtime is spent in 20 percent of the source code.
        
by adding a little extra info, get all of C's speed without the headaches. p. 32
        
        
p. 33 - lots of effort optimizing for loops
cython recognizes python loops and transforms them to loops in C
        
p. 34 Cython can automatically improve performance of code. but it is sometimes necessary to take a look at the time intensive code and then directly program for it. 
        
p. 34
Cython has special use for sparce matrices.
sparse matrices can rarely be expressed in terms of NumPy expressions. Figure 4 shows Cython being ideal for sparse matrices. 
        
p. 35 numpy can be ok except in cases of small amounts of data and very large. 
        
numpy requires large amounts of temporary data
memory bus becomes a major issue and cython can offer speedup over numpy by factor of 10
        
numexpr, Theano are tools for transformations on large arrays, p. 35
        
different optimization levels for different problem sizes
        
note the overhead of python function call. 
        
p. 36
potentially call existing C or Fortran code directly from Cython. Need Cython Wrappers.
or implement directly in Cython for no overhead 
        
        
one problem is that numpy functions are geared towards rectangular arrays
        
looping using cython can be up to 1000 x faster than python. faster than numpy by factor of 27
        
p. 38
drawbacks - requires seperate compilation step. seperate build phase. use mix of C and Cython because Cython sources don't need to be recompiled when Python sources change. 
        
limited support for shared memory parallelism, i.e. threading. because of GIL
        
can declare sections for threading using nogil. no support for OpenMP in Cython. MPI works well though
        
benchmarks available in Seljebotn, citation 5},
author = {Behnel, Stefan and Bradshaw, Robert and Citro, Craig and Dalcin, Lisandro and Seljebotn, Dag Sverre and Smith, Kurt},
doi = {10.1109/MCSE.2010.118},
file = {::},
issn = {1521-9615},
journal = {Computing in Science \& Engineering},
keywords = {HLHPC},
mendeley-tags = {HLHPC},
month = mar,
number = {2},
pages = {31--39},
title = {{Cython: The Best of Both Worlds}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=5582062},
volume = {13},
year = {2011}
}
@inproceedings{masini,
author = {Masini, Stefano and Bientinesi, Paolo},
booktitle = {EuroPar 2010},
file = {::},
keywords = {HLHPC,python},
mendeley-tags = {HLHPC,python},
title = {{High-Performance Parallel Computations using Python as High-Level Language}},
url = {http://www.aices.rwth-aachen.de:8080/aices/preprint/documents/AICES-2010-08-01.pdf},
year = {2010}
}
@article{Cai2005,
author = {Cai, Xing and Langtangen, H.P. and Moe, Halvard},
file = {:Users/rcloud/Documents/All.sente6lib/Contents/Attachments/Cai/2005/On the performance of the Python programming langu.pdf:pdf},
journal = {Scientific Programming},
keywords = {1,and,background and introduction,c,decade has also popularized,demand for increased software,flexibility during the last,for numerical simulation,in particular fortran 77,mixed-language programming,mpi,multi-dimensional array computing,parallel computing,python,python programming,scientific software,the,there is a strong,to use compiled languages,tradition among computational scientists},
mendeley-tags = {python,scientific software},
number = {1},
pages = {31--56},
publisher = {IOS Press},
title = {{On the performance of the Python programming language for serial and parallel scientific computations}},
url = {http://portal.acm.org/citation.cfm?id=1239665},
volume = {13},
year = {2005}
}
@phdthesis{Ning1992,
abstract = {Naturally fractured reservoirs are important sources of oil and gas throughout the world. The properties of the matrix and the fractures are key parameters in predicting the performances of naturally fractured reservoirs. This dissertation describes a new laboratory technique to determine (1) the porosity of the matrix, (2) the permeability of the matrix, (3) the effective width of the fractures, and (4) the permeability of the fractures, in a naturally fractured, low permeability core using a pressure pulse method. New laboratory equipment has been desgned and constructed to conduct pressure pulse tests in either a homogeneous or a fractured core sample. Analytical solutions have been developed to model gas flow in a fractured core sample during a pressure pulse test. An automatic history matching program has been developedto analyze the laboratory measured pressure transient data using the analytical solutions. Two leak compensation methods have been developed to compensate for the gas that leaks from the system during a presssure pulse test. The new technique has been used to measure th ematrix and fracture properties in twelve naturally fractured, Devonian Shale cores. The results of measurements are presented in this dissertation. The porosity values measured using the new technique compare favorably with those measured by Core Laboraturoy using crushed samples from the same cores. A two-dimensional, two-phase finite difference simulator has been developed to simulate pressure pulse tests on a computer. The finite difference simulator has been used to check the validity of the new analytical solutions and to investigate the two-phase flow during relative permeability measurements. The technique we developed in this research is new to the petroleum industry. Our laboratory equipment is unique, and the analytical solutions have not been published in the literature. With this techniqe, we can measure matrix properties as low as 10\^{}-9 md. This is a significant step forward in permeability measurement because the lowest permeability that the existing laboratory technique can measure is in the order of 10\^{}-6 millidarcies.},
author = {Ning, X.},
file = {::},
title = {{The measurement of matrix and fracture properties in naturally fractured low permeability cores using a pressure pulse method}},
year = {1992}
}
@article{Neuzil1981,
author = {{Hsieh, P.A.; Tracy, J.V.; Neuzil, C.E.; Bredehoeft, J.D.; Silliman}, S.E.},
doi = {10.1016/0148-9062(81)90090-5},
file = {::},
issn = {01489062},
journal = {International Journal of Rock Mechanics and Mining Sciences \& Geomechanics Abstracts},
month = oct,
number = {5},
pages = {89--89},
title = {{Transient laboratory method for determining the hydraulic properties of ‘tight’ rocks - 1. Theory Hsieh, P A; Tracy, J V; Neuzil, C E Int J Rock Mech Min Sci, V18, N3, June 1981, P245–252}},
url = {http://linkinghub.elsevier.com/retrieve/pii/0148906281900905},
volume = {18},
year = {1981}
}
@article{HaskettS.E.;NaraharaG.M.;Holditch1988,
abstract = {A new method for simultaneously determining the permeability and porosity of low-permeability cores is described. This method uses unsteady-state gas flow, which results in rapid tests. Equations are presented that describe the pressure response as a function of porosity and permeability. Comparisons of results to numerical simulations and conventional core-analysis methods are presented that verify the method's accuracy.},
author = {{Haskett, S.E.; Narahara, G.M.; Holditch}, S.A.},
file = {::},
journal = {SPE Formation Evaluation},
number = {September 1988},
pages = {651 -- 658},
title = {{Simultaneous determination of permeability and porosity in low-permeability cores}},
year = {1988}
}
